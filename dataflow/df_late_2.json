{
	"name": "df_late_2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SNF_sales",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SNF_CUST",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SNF_CUST",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "snf_fact_late",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "join"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     PID as string (\"INFERRED\"),",
				"     CUSTNAME as string (\"UNKNOWN\"),",
				"     SALESLOAD as string (\"SALES LOAD\")",
				"}",
				"source(output(",
				"          INVOICEID as decimal(38,0),",
				"          CUSTOMERID as decimal(38,0),",
				"          INVOICEDATE as date,",
				"          SHIPTO as string,",
				"          SHIPTO_CITY as string,",
				"          SHIPTO_COUNTRY as string,",
				"          SALESPERSONPERSONID as decimal(38,0),",
				"          SALESPERSONNAME as string,",
				"          TOTAL_PRODUCT_CNT as decimal(38,0),",
				"          TOTAL as double,",
				"          DI_LOAD_DATE as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          CUSTOMER_SK as string,",
				"          CUSTOMER_ID as decimal(38,0),",
				"          CUSTOMER_NAME as string,",
				"          DI_CREATEDDT as timestamp,",
				"          PID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source2",
				"join split(isNull(CUSTOMER_ID),",
				"     disjoint: true) ~> split1@(NONMATCHING, MATCHING)",
				"source1, source2 join(CUSTOMERID == CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join",
				"split1@NONMATCHING derive(CUSTOMER_SK = iifNull(CUSTOMER_SK, toString(uuid())),",
				"          CUSTOMER_ID = CUSTOMERID,",
				"          CUSTOMER_NAME = $CUSTNAME,",
				"          DI_CREATEDDT = currentTimestamp(),",
				"          PID = $PID) ~> derivedColumn1",
				"split1@MATCHING derive(INVOICE_SK = uuid(),",
				"          INVOICE_ID = INVOICEID,",
				"          CUSTOMER_ID = CUSTOMERID,",
				"          INVOICE_DT = INVOICEDATE,",
				"          TOTAL_PRODUCT_CNT = TOTAL_PRODUCT_CNT,",
				"          TOTAL_PRODUCT_COST = TOTAL,",
				"          DI_CREATEDDT = currentTimestamp(),",
				"          PID = $SALESLOAD) ~> derivedColumn2",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          CUSTOMER_SK,",
				"          CUSTOMER_ID,",
				"          CUSTOMER_NAME,",
				"          DI_CREATEDDT,",
				"          PID",
				"     )) ~> sink1",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INVOICE_SK = INVOICEID,",
				"          INVOICE_ID,",
				"          CUSTOMER_ID,",
				"          INVOICE_DT,",
				"          TOTAL_PRODUCT_CNT,",
				"          TOTAL_PRODUCT_COST,",
				"          DI_CREATEDDT,",
				"          PID",
				"     )) ~> sink2"
			]
		}
	}
}