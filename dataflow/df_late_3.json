{
	"name": "df_late_3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SNF_customer2",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SNF_CUST",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SNF_CUST",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "SNF_CUST",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     PID as string (\"UPDATED\"),",
				"     PIDLATE as string (\"LATE\")",
				"}",
				"source(output(",
				"          CUSTOMERID as string,",
				"          CUSTOMERNAME as string,",
				"          BILLTO as string,",
				"          DI_LOAD_DATE as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          CUSTOMER_SK as string,",
				"          CUSTOMER_ID as string,",
				"          CUSTOMER_NAME as string,",
				"          DI_CREATEDDT as timestamp,",
				"          PID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source2",
				"join1 split(!isNull(CUSTOMER_ID) && PID == 'INFERRED',",
				"     disjoint: true) ~> split1@(inferredupdate, newinsert)",
				"split1@inferredupdate derive(CUSTOMER_NAME = CUSTOMERNAME,",
				"          DI_CREATEDDT = currentTimestamp(),",
				"          PID = $PID) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(true())) ~> alterRow1",
				"split1@newinsert derive(CUSTOMER_SK = uuid(),",
				"          CUSTOMER_ID = CUSTOMERID,",
				"          CUSTOMER_NAME = CUSTOMERNAME,",
				"          DI_CREATEDDT = currentTimestamp(),",
				"          PID = $PIDLATE) ~> derivedColumn2",
				"source1, source2 join(CUSTOMERID == CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CUSTOMER_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          CUSTOMER_SK,",
				"          CUSTOMER_ID,",
				"          CUSTOMER_NAME,",
				"          DI_CREATEDDT,",
				"          PID",
				"     )) ~> sink1",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          CUSTOMER_SK,",
				"          CUSTOMER_ID,",
				"          CUSTOMER_NAME,",
				"          DI_CREATEDDT,",
				"          PID",
				"     )) ~> sink2"
			]
		}
	}
}